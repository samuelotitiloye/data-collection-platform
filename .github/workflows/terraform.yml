name: terraform

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - 'network/**'
      - 'eks/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [ "main" ]
    paths:
      - 'network/**'
      - 'eks/**'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-2
  TF_IN_AUTOMATION: "true"
  TF_CLI_ARGS: "-no-color"

jobs:
  terraform:
    name: ${{ matrix.dir }} (${{ github.event_name }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: [ "network", "eks" ]
      # Only run for dirs that changed in this commit/PR
      max-parallel: 2
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes for ${{ matrix.dir }}
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            changed:
              - '${{ matrix.dir }}/**'
              - '.github/workflows/terraform.yml'

      - name: Skip if no changes in ${{ matrix.dir }}
        if: steps.changes.outputs.changed != 'true'
        run: echo "No changes in ${{ matrix.dir }}, skipping."

      - name: Configure AWS (OIDC)
        if: steps.changes.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}

      - name: Setup Terraform
        if: steps.changes.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Fmt Check
        if: steps.changes.outputs.changed == 'true'
        run: terraform fmt -check -recursive

      - name: Terraform Init
        if: steps.changes.outputs.changed == 'true'
        run: terraform init -backend-config=backend.hcl.example

      - name: Terraform Validate
        if: steps.changes.outputs.changed == 'true'
        run: terraform validate

      - name: Terraform Plan
        if: steps.changes.outputs.changed == 'true'
        run: terraform plan -out=tfplan

      # On PRs, stop after Plan (reviewers can inspect the logs)
      - name: Upload Plan (PR only)
        if: steps.changes.outputs.changed == 'true' && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.dir }}
          path: ${{ matrix.dir }}/tfplan

      # On push to main, apply the freshly created plan in the same run
      - name: Terraform Apply (main only)
        if: steps.changes.outputs.changed == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          # enforce a GitHub Environment approval gate
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          terraform apply -auto-approve tfplan
          environment: prod-approval
